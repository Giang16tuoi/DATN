@model IEnumerable<APPDATA.Models.ProductDetail>

@{

    @using APPDATA.Models;
    @using System.Globalization
    ViewData["Title"] = "BanHangOff";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    Bill bil = ViewBag.bil;
    List<BillDetail> billct = ViewBag.bilct;
    List<ProductDetail> prd = ViewBag.prd;
    List<Color> mau = ViewBag.color;
    List<Size> kichco = ViewBag.size;

    List<Guid> id = new List<Guid>();
    if (bil != null)
    {
        var idpr = billct.Where(c => c.BIllId == bil.id);
     
        if (idpr != null)

        {
            foreach (var item in idpr)
            {
                id.Add(item.ProductDetailID);

            }
        }
    }


}

<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Phần bên trái để tạo hóa đơn -->
            <div class="col-md-5">
                <div class="card">
                    <form id="myForm" asp-action="Createbill" method="post">
                        <div class="card-header">
                            Tạo Hóa Đơn
                        </div>
                        <div class="card-body">
                            @if (bil != null)

                            {
                                var bilct = billct.Where(c => c.BIllId == bil.id).ToList();
                                <input type="hidden" value="@bil.id" name="billid">

                                foreach (var item in bilct)

                                {

                                    var pr = prd.FirstOrDefault(c => c.Id == item.ProductDetailID);
                                    var siz = kichco.FirstOrDefault(c => c.Id == pr.Id_Size);
                                    var colo = mau.FirstOrDefault(c => c.Id == pr.Id_Color);

                                    <div style="display: flex; flex-direction: column;">
                                        <p data-productid="@pr.Id">
                                            Sản phẩm: @pr.Name | Size: @siz.Name | Màu: @colo.Name
                                        </p>
                                        <div style="display: flex; align-items: center; margin-top: 5px;">
                                            <p>Số lượng: </p>
                                            <input type="number" value="@item.Amount" min="1" max="@pr.Quantity" name="sl" style="margin-left: 5px; margin-bottom: 12px; width: 50px;">
                                            <input type="hidden" value="@pr.Id" name="productIdChoose">
                                        </div>
                                        <p style="display: flex; align-items: center;" class="product-price">
                                            <span>@pr.Price</span>
                                            <span style="margin-left: 5px;">VND</span>
                                        </p>
                                        <button type="button" style="width: 170px; margin-bottom: 17px; background-color: #F08080; border-radius: 17px;">
                                            Hủy chọn
                                        </button>
                                    </div>





                                }

                            }
                        </div>
                        <div class="card-footer">
                            <span>Số điện thoại : </span>   <br><input type="text" id="sdt" name="sdt" onchange="layTenKhachHang()" style="margin-right:170px"><br>
                            <span>Tên khách hàng : </span>  <br> <input type="text" id="tenkh" name="tenkh"><br>
                            <span>Tiền khách đưa : </span>  <br> <input type="number" min="0" id="khachdua" onchange="tinhTienThua()"><br>
              @*               @{
                                if (bil != null)
                                {
                                    <span>Tổng tiền : </span> <br>  <input type="number" min="0" value="@bil.TotalMoney" id="tong" name="tongtien" readonly="readonly" style="border:none">

                                    <br>
                                }
                                else
                                {

                                    <span>Tổng tiền : </span> <br>  <input type="number" min="0" value="0" id="tong" name="tongtien" readonly="readonly" style="border:none">

                                    <br>
                                
                                }

                            
                            } *@

                            <span>Tổng tiền : </span> <br>  <input type="hidden" min="0" value="0" id="tong" name="tongtien" readonly="readonly" style="border:none">
                            <span id="tong2"></span>

                            <br>
                            <span id="tienthua"></span>  <br>
                            <span id="error"></span> <br>
                            <div class="row">
                                <!-- Phần bên trái để tạo hóa đơn -->
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-primary" style="margin-top:15px">Tạo Hóa Đơn</button>

                                </div>
                                <div class="col-md-4">
                                    <button type="submit" onclick="submitForm('banhangoff')" class="btn btn-primary" style="margin-top:15px">Tạo Hóa Đơn Chờ</button>

                                </div>
                            </div>
                        </div>

                    </form>
                    <form action="~/qlbills/banhangoff" method="post">
                        <button type="submit" action="~/qlbills/banhangoff" class="btn btn-primary" style="margin-top:15px ;margin-left:20px">Tạo Hóa Đơn Khác</button>
                    </form>
                </div>
            </div>
            <!-- Phần bên phải để hiển thị sản phẩm -->
            <div class="col-md-7">
                <!-- Danh sách sản phẩm -->

                <div class="card">
                    <div class="card-header">


                        <span>Tìm Kiếm : </span>   <input type="text" id="timkiem" style="height:40px"> <br>


                    </div>
                    <div class="card-body">
                        <div class="row" id="divToUpdate">

                            @foreach (var item in Model)
                            {


                                <div class="col-md-6 col-lg-4 col-xl-3">
                                    <div class="card text-center card-product">

                                        <div class="card-product__img">
                                            @foreach (var img in ViewBag.Img)
                                            {
                                                if (img.IdProductdetail == item.Id)
                                                {
                                                    <img class="card-img" style="width:150p;height:200px" src="~/images/@img.Name" alt="">
                                                    break;
                                                }

                                            }



                                            <button class="btn btn-primary" style="margin-top:10px" data-id="@item.Id">Chọn sản phẩm</button>

                                        </div>
                                        <div class="card-body">

                                            <p style="text-align:left;display: inline-block;width: 700px">
                                                Sản phẩm : @item.Name
                                            </p>
                                            @foreach (var size in ViewBag.size)
                                            {
                                                if (size.Id == item.Id_Size)
                                                {
                                                    <p style="text-align:left">Sise : @size.Name</p>
                                                    break;
                                                }

                                            }

                                            @foreach (var size in ViewBag.color)
                                            {
                                                if (size.Id == item.Id_Color)
                                                {
                                                    <p style="text-align:left"> Màu: @size.Name</p>
                                                    break;
                                                }

                                            }

                                            <p style="text-align:left">Giá : @item.Price</p>
                                        </div>
                                    </div>
                                </div>


                            }


                        </div>
                    </div>
                </div>
            </div>



</body>





<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

    var idArray = @Html.Raw(Json.Serialize(id.Select(x => x.ToString()).ToArray()));
    // var bill = @Html.Raw(Json.Serialize(bil));
    // console.log(bill.name);
    // var mau = @Html.Raw(Json.Serialize(mau));
    // var kichco = @Html.Raw(Json.Serialize(kichco));
    // var prd = @Html.Raw(Json.Serialize(prd));
    // console.log(prd);
    // var billct = @Html.Raw(Json.Serialize(billct));

    // var filteredBillct = billct.every(item => item.billid == bill.id);
    // console.log(filteredBillct);
    // var filteredProducts = prd.every(product => {
    //     return billct.every(item => item.billid === bill.id && item.ProductDetailID === product.id);
    // });
    // console.log(filteredProducts);





    // filteredBillct.forEach(function (item) {
    //         filteredProducts.forEach(function (retunprd) {
    //             var colorr = mau.find(bills => bills.id === retunprd.id_size);
    //         var sizee = kichco.find(bills => bills.id === retunprd.id_color);

    //             console.log(colorr); console.log(sizee);
    //         }); 
    //     });
    
    

    // // const productContainer = document.createElement('div');
    // // productContainer.style.display = 'flex';
    // // productContainer.style.flexDirection = 'column'; Hiển thị các phần tử theo chiều dọc

    // // const productName = document.createElement('p');
    // // productName.textContent = `Sản phẩm: ${product.name} | Size: ${size} | Màu : ${color}`;
    // // productName.setAttribute('data-productid', product.id);
    // // productContainer.appendChild(productName);

    // // const productInfoContainer = document.createElement('div');
    // // productInfoContainer.style.display = 'flex';
    // // productInfoContainer.style.alignItems = 'center'; Căn giữa các phần tử con theo chiều dọc
    // // productInfoContainer.style.marginTop = '5px'; Khoảng cách từ tên sản phẩm đến số lượng

    // // const productQuantityLabel = document.createElement('p');
    // // productQuantityLabel.textContent = 'Số lượng: ';
    // // productInfoContainer.appendChild(productQuantityLabel);


    // // const productQuantityInput = document.createElement('input');
    // // productQuantityInput.setAttribute('type', 'number');
    // // productQuantityInput.setAttribute('value', '1')

    // // productQuantityInput.setAttribute('min', '1');
    // // productQuantityInput.setAttribute('max', product.quantity);
    // // productQuantityInput.setAttribute('name', 'soluong');
    // // productQuantityInput.style.marginLeft = '5px';
    // // productQuantityInput.style.marginBottom = '12px';
    // // productQuantityInput.style.width = '50px';
    // // const idprd = document.createElement('input');
    // // idprd.setAttribute('type', 'hidden');
    // // idprd.setAttribute('value', product.id);

    // // idprd.setAttribute('name', 'productId');


    // // productInfoContainer.appendChild(idprd);

    // // productInfoContainer.appendChild(productQuantityInput);



    // // const productPriceContainer = document.createElement('p');
    // // productPriceContainer.style.display = 'flex';
    // // productPriceContainer.style.alignItems = 'center';

    // // const productPrice = document.createElement('span');
    // // productPrice.textContent = `${product.price}`;
    // // productPriceContainer.appendChild(productPrice);
    // // productPriceContainer.classList.add('product-price'); Thêm lớp product - price vào phần tử chứa giá sản phẩm

    // // const productPriceVND = document.createElement('span');
    // // productPriceVND.textContent = ` VND`;
    // // productPriceVND.style.marginLeft = '5px';
    // // productPriceContainer.appendChild(productPriceVND);

    // // const cancelButton = document.createElement('button');
    // // cancelButton.textContent = 'Hủy chọn';
    // // cancelButton.setAttribute('type', 'button');
    // // cancelButton.addEventListener('click', function () {
    // //     totalPrice -= parseInt(productPrice.textContent);
    // //     tongInput1.value = totalPrice;
    // //     delete chosenProducts[productId];
    // //     productContainer.remove();
    // // });
    // // cancelButton.style.width = '170px';
    // // cancelButton.style.marginBottom = '17px';
    // // cancelButton.style.backgroundColor = '#F08080';
    // // cancelButton.style.borderRadius = '17px';
    // // productContainer.appendChild(productInfoContainer);
    // // productContainer.appendChild(productPriceContainer);
    // // productContainer.appendChild(cancelButton);


    // // cardBody.appendChild(productContainer);
    // // Kiểm tra nếu idArray có giá trị và log ra console để kiểm tra
    if (idArray.length > 0) {
        console.log("idArray: ", idArray);  

        // Thực hiện các thao tác khác sau khi có idArray
        // ...
    }
    if (idArray.length) {
        var chosenProducts = {};
        idArray.forEach(function (productId) {
            chosenProducts[productId] = true;
        });

        // Các thao tác khác sau khi đã thêm các productId vào chosenProducts
    } else {
        var chosenProducts = {};
    }

    let totalPrice = 0;

    
    $('#divToUpdate').on('click', 'button[data-id]', function (event) {
        event.preventDefault();
        const cardBody = document.querySelector('.card-body');
        const productId = $(this).attr('data-id');


        if (!chosenProducts[productId]) { // Kiểm tra nếu sản phẩm chưa được chọn
            chosenProducts[productId] = true; // Đánh dấu sản phẩm đã chọn

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/QLBills/ChosenProduct');
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            // Xử lý thông tin sản phẩm được chọn tương tự như trong đoạn mã hiện tại
                            // ...
                            const product = response.sanphamchitiets[0]; // Lấy thông tin sản phẩm
                            const size = response.size;
                            const color = response.color;

                            const productContainer = document.createElement('div');
                            productContainer.style.display = 'flex';
                            productContainer.style.flexDirection = 'column'; // Hiển thị các phần tử theo chiều dọc

                            const productName = document.createElement('p');
                            productName.textContent = `Sản phẩm: ${product.name} | Size: ${size} | Màu : ${color}`;
                            productName.setAttribute('data-productid', product.id);
                            productContainer.appendChild(productName);

                            const productInfoContainer = document.createElement('div');
                            productInfoContainer.style.display = 'flex';
                            productInfoContainer.style.alignItems = 'center'; // Căn giữa các phần tử con theo chiều dọc
                            productInfoContainer.style.marginTop = '5px'; // Khoảng cách từ tên sản phẩm đến số lượng

                            const productQuantityLabel = document.createElement('p');
                            productQuantityLabel.textContent = 'Số lượng: ';
                            productInfoContainer.appendChild(productQuantityLabel);


                            const productQuantityInput = document.createElement('input');
                            productQuantityInput.setAttribute('type', 'number');
                            productQuantityInput.setAttribute('value', '1')

                            productQuantityInput.setAttribute('min', '1');
                            productQuantityInput.setAttribute('max', product.quantity);
                            productQuantityInput.setAttribute('name', 'soluong');
                            productQuantityInput.style.marginLeft = '5px';
                            productQuantityInput.style.marginBottom = '12px';
                            productQuantityInput.style.width = '50px';
                            const idprd = document.createElement('input');
                            idprd.setAttribute('type', 'hidden');
                            idprd.setAttribute('value', product.id);

                            idprd.setAttribute('name', 'productId');


                            productInfoContainer.appendChild(idprd);

                            productInfoContainer.appendChild(productQuantityInput);



                            const productPriceContainer = document.createElement('p');
                            productPriceContainer.style.display = 'flex';
                            productPriceContainer.style.alignItems = 'center';

                            const productPrice = document.createElement('span');
                            productPrice.textContent = `${product.price}`;
                            productPriceContainer.appendChild(productPrice);
                            productPriceContainer.classList.add('product-price'); // Thêm lớp product-price vào phần tử chứa giá sản phẩm

                            const productPriceVND = document.createElement('span');
                            productPriceVND.textContent = ` VND`;
                            productPriceVND.style.marginLeft = '5px';
                            productPriceContainer.appendChild(productPriceVND);

                            const cancelButton = document.createElement('button');
                            cancelButton.textContent = 'Hủy chọn';
                            cancelButton.setAttribute('type', 'button');
                            cancelButton.addEventListener('click', function () {
                                totalPrice -= parseInt(productPrice.textContent);
                                tongInput1.value = totalPrice;
                                tongInput2.textContent = totalPrice;
                                delete chosenProducts[productId];
                                productContainer.remove();
                            });
                            cancelButton.style.width = '170px';
                            cancelButton.style.marginBottom = '17px';
                            cancelButton.style.backgroundColor = '#F08080';
                            cancelButton.style.borderRadius = '17px';
                            productContainer.appendChild(productInfoContainer);
                            productContainer.appendChild(productPriceContainer);
                            productContainer.appendChild(cancelButton);


                            cardBody.appendChild(productContainer);

                            const tongInput1 = document.getElementById('tong');
                            const tongInput2 = document.getElementById('tong2');
                            const productPriceValue = parseInt(productQuantityInput.value) * product.price;
                            totalPrice += productPriceValue; // Cộng giá sản phẩm vào tổng giá
                            tongInput1.value = totalPrice;
                            tongInput2.textContent = totalPrice;// Cập nhật tổng giá vào input có id là 'tong'

                            // Sự kiện thay đổi số lượng sản phẩm và tính tổng giá sản phẩm
                            productQuantityInput.addEventListener('change', function () {
                                const quantity = parseInt(productQuantityInput.value); // Lấy giá trị số lượng từ ô input

                                if (!isNaN(quantity) && quantity > 0) {
                                    const updatedPrice = product.price * quantity; // Tính giá sản phẩm mới dựa trên số lượng nhập vào

                                    const previousPrice = parseInt(productPrice.textContent);
                                    totalPrice -= previousPrice; // Trừ giá cũ khỏi tổng giá

                                    productPrice.textContent = `${updatedPrice}`;

                                    totalPrice += updatedPrice; // Cộng giá mới vào tổng giá
                                    const tongInput = document.getElementById('tong');
                                    const tongInput22 = document.getElementById('tong2');
                                    if (tongInput) {
                                        tongInput.value = totalPrice;
                                        tongInput22.textContent = totalPrice;// Cập nhật tổng giá vào input có id là 'tong'
                                    }
                                } else {
                                    console.error('Số lượng không hợp lệ!');
                                }
                            });
                        } else {
                            console.error('Có lỗi xảy ra khi lấy thông tin sản phẩm');
                        }
                    } else {
                        console.error('Yêu cầu không thành công');
                    }
                }
            };
            xhr.send(`productId=${productId}`);
        } else {
            console.log('Sản phẩm đã được chọn trước đó');
            // Có thể hiển thị thông báo cho người dùng rằng sản phẩm đã được chọn trước đó
        }
    });
    $(document).ready(function () {
        $('#timkiem').on('input', function () {
            var searchText = $(this).val();

            // Gửi yêu cầu Ajax với dữ liệu searchText về server
            $.ajax({
                type: "POST",
                url: "/QLBills/TimKiem", // Thay đổi đường dẫn và thông tin tương ứng
                data: { searchText: searchText },
                success: function (data) {
                    if (data.success) {
                        var products = data.productct;
                        var sizes = data.size;
                        var colors = data.color;
                        var imgs = data.img;
                        var productsHTML = '';

                        products.forEach(function (item) {
                            var imgHTML = '';
                            imgs.forEach(function (img) {
                                if (img.idProductdetail == item.id) {
                                    imgHTML = '<img class="card-img"  style="width:150p;height:200px" src="/images/' + img.name + '" alt="">';
                                    return false;
                                }
                            });

                            var sizeHTML = '';
                            sizes.forEach(function (size) {
                                if (size.id == item.id_Size) {
                                    sizeHTML = '<p style="text-align:left">Size: ' + size.name + '</p>';
                                    return false;
                                }
                            });

                            var colorHTML = '';
                            colors.forEach(function (color) {
                                if (color.id == item.id_Color) {
                                    colorHTML = '<p style="text-align:left">Màu: ' + color.name + '</p>';
                                    return false;
                                }
                            });

                            var cardHtml = '<div class="col-md-6 col-lg-4 col-xl-3">' +
                                '<div class="card text-center card-product">' +
                                '<div class="card-product__img">' + imgHTML + '</div>' + // Đóng chuỗi HTML ở đây
                                '<button class="btn btn-primary" style="margin-top:10px" data-id="' + item.id + '">Chọn sản phẩm</button>' +
                                '</div>' +
                                '<div class="card-body">' +
                                '<p style="text-align:left;display: inline-block;width: 700px">Sản phẩm: ' + item.name + '</p>' +
                                sizeHTML + colorHTML +
                                '<p style="text-align:left">Giá: ' + item.price + '</p>' +
                                '</div>' +
                                '</div>' +
                                '</div>';

                            productsHTML += cardHtml;
                        });

                        $('#divToUpdate').html(productsHTML);

                    }
                }
            });
        });
    });


    document.addEventListener('DOMContentLoaded', function () {
        const productButtons = document.querySelectorAll('button[data-id]');
        const cardBody = document.querySelector('.card-body'); // Chọn phần tử chứa thông tin sản phẩm
        // Biến để lưu tổng giá của các sản phẩm đã chọn
        // Đối tượng để lưu trữ các sản phẩm đã chọn

        productButtons.forEach(button => {
            button.addEventListener('click', function (event) {
                event.preventDefault();

                const productId = this.getAttribute('data-id');

                if (!chosenProducts[productId]) { // Kiểm tra nếu sản phẩm chưa được chọn
                    chosenProducts[productId] = true; // Đánh dấu sản phẩm đã chọn

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', '/QLBills/ChosenProduct');
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                const response = JSON.parse(xhr.responseText);
                                if (response.success) {
                                    const product = response.sanphamchitiets[0]; // Lấy thông tin sản phẩm
                                    const size = response.size;
                                    const color = response.color;

                                    const productContainer = document.createElement('div');
                                    productContainer.style.display = 'flex';
                                    productContainer.style.flexDirection = 'column'; // Hiển thị các phần tử theo chiều dọc

                                    const productName = document.createElement('p');
                                    productName.textContent = `Sản phẩm: ${product.name} | Size: ${size} | Màu : ${color}`;
                                    productName.setAttribute('data-productid', product.id);
                                    productContainer.appendChild(productName);

                                    const productInfoContainer = document.createElement('div');
                                    productInfoContainer.style.display = 'flex';
                                    productInfoContainer.style.alignItems = 'center'; // Căn giữa các phần tử con theo chiều dọc
                                    productInfoContainer.style.marginTop = '5px'; // Khoảng cách từ tên sản phẩm đến số lượng

                                    const productQuantityLabel = document.createElement('p');
                                    productQuantityLabel.textContent = 'Số lượng: ';
                                    productInfoContainer.appendChild(productQuantityLabel);


                                    const productQuantityInput = document.createElement('input');
                                    productQuantityInput.setAttribute('type', 'number');
                                    productQuantityInput.setAttribute('value', '1')

                                    productQuantityInput.setAttribute('min', '1');
                                    productQuantityInput.setAttribute('max', product.quantity);
                                    productQuantityInput.setAttribute('name', 'soluong');
                                    productQuantityInput.style.marginLeft = '5px';
                                    productQuantityInput.style.marginBottom = '12px';
                                    productQuantityInput.style.width = '50px';
                                    const idprd = document.createElement('input');
                                    idprd.setAttribute('type', 'hidden');
                                    idprd.setAttribute('value', product.id);

                                    idprd.setAttribute('name', 'productId');


                                    productInfoContainer.appendChild(idprd);

                                    productInfoContainer.appendChild(productQuantityInput);

                                    const productPriceContainer = document.createElement('p');
                                    productPriceContainer.style.display = 'flex';
                                    productPriceContainer.style.alignItems = 'center';

                                    const productPrice = document.createElement('span');
                                    productPrice.textContent = `${product.price}`;
                                    productPriceContainer.appendChild(productPrice);
                                    productPriceContainer.classList.add('product-price'); // Thêm lớp product-price vào phần tử chứa giá sản phẩm

                                    const productPriceVND = document.createElement('span');
                                    productPriceVND.textContent = ` VND`;
                                    productPriceVND.style.marginLeft = '5px';
                                    productPriceContainer.appendChild(productPriceVND);

                                    const cancelButton = document.createElement('button');
                                    cancelButton.textContent = 'Hủy chọn';
                                    cancelButton.setAttribute('type', 'button');
                                    cancelButton.addEventListener('click', function () {
                                        totalPrice -= parseInt(productPrice.textContent);
                                        tongInput1.value = totalPrice;
                                        tongInput2.textContent = totalPrice;
                                        delete chosenProducts[productId];
                                        productContainer.remove();
                                    });
                                    cancelButton.style.width = '170px';
                                    cancelButton.style.marginBottom = '17px';
                                    cancelButton.style.backgroundColor = '#F08080';
                                    cancelButton.style.borderRadius = '17px';
                                    productContainer.appendChild(productInfoContainer);
                                    productContainer.appendChild(productPriceContainer);
                                    productContainer.appendChild(cancelButton);


                                    cardBody.appendChild(productContainer);

                                    const tongInput1 = document.getElementById('tong');
                                    const tongInput2 = document.getElementById('tong2');
                                    const productPriceValue = parseInt(productQuantityInput.value) * product.price;
                                    totalPrice += productPriceValue; // Cộng giá sản phẩm vào tổng giá
                                    tongInput1.value = totalPrice;
                                    tongInput2.textContent = totalPrice; // Cập nhật tổng giá vào input có id là 'tong'

                                    // Sự kiện thay đổi số lượng sản phẩm và tính tổng giá sản phẩm
                                    productQuantityInput.addEventListener('change', function () {
                                        const quantity = parseInt(productQuantityInput.value); // Lấy giá trị số lượng từ ô input

                                        if (!isNaN(quantity) && quantity > 0) {
                                            const updatedPrice = product.price * quantity; // Tính giá sản phẩm mới dựa trên số lượng nhập vào

                                            const previousPrice = parseInt(productPrice.textContent);
                                            totalPrice -= previousPrice; // Trừ giá cũ khỏi tổng giá

                                            productPrice.textContent = `${updatedPrice}`;

                                            totalPrice += updatedPrice; // Cộng giá mới vào tổng giá

                                            const tongInput = document.getElementById('tong');
                                            const tongInput22 = document.getElementById('tong2');
                                            if (tongInput) {
                                                tongInput.value = totalPrice;
                                                tongInput22.textContent = totalPrice;
                                                // Cập nhật tổng giá vào input có id là 'tong'
                                            }
                                        } else {
                                            console.error('Số lượng không hợp lệ!');
                                        }
                                    });
                                } else {
                                    console.error('Có lỗi xảy ra khi lấy thông tin sản phẩm');
                                }
                            } else {
                                console.error('Yêu cầu không thành công');
                            }
                        }
                    };
                    xhr.send(`productId=${productId}`);
                } else {
                    console.log('Sản phẩm đã được chọn trước đó');
                    // Có thể hiển thị thông báo cho người dùng rằng sản phẩm đã được chọn trước đó
                }
            });
        });
    });
</script>
<script>
    function tinhTienThua() {
        // Lấy giá trị nhập vào từ trường "Tiền khách đưa"
        var khachDua = parseFloat(document.getElementById("khachdua").value);

        // Lấy giá trị tổng tiền từ trường "Tổng tiền" (giả sử bạn đã cập nhật giá trị này từ code khác)
        var tongTien = parseFloat(document.getElementById("tong").value);

        // Tính tiền thừa
        var tienThua = khachDua - tongTien;
        if (isNaN(khachDua)) {
            document.getElementById("error").textContent = "Vui lòng nhập số.";
            document.getElementById("error").style.color = "red";
            return; // Kết thúc hàm tại đây nếu giá trị nhập không phải số
        }


        // Hiển thị giá trị tiền thừa và thông báo lỗi (nếu có)
        if (tienThua < 0) {
            document.getElementById("error").textContent = "Thiếu : " + (tienThua * (-1));
            document.getElementById("error").style.color = "red";
            // Ẩn nhãn "Tiền thừa" nếu không có tiền thừa
            document.getElementById("tienthua").textContent = ""; // Xóa nội dung trường "Tiền thừa"
        } else {
            // Cập nhật nhãn "Tiền thừa"
            document.getElementById("tienthua").textContent = "Thừa : " + tienThua; // Hiển thị tiền thừa
            document.getElementById("error").textContent = ""; // Xóa thông báo lỗi
        }
    }


</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function layTenKhachHang() {
        var sdt = document.getElementById('sdt').value;

        $.ajax({
            url: '/QLBills/GetName', // Địa chỉ URL của phương thức trong CustomerController
            type: 'POST',
            data: { sdt: sdt },
            success: function (response) {
                // Xử lý dữ liệu nhận được từ server
                document.getElementById('tenkh').value = response.name;
            },
            error: function (xhr, status, error) {
                // Xử lý lỗi nếu có
                console.error(xhr.responseText);
            }
        });
    }
</script>
<script>
    function submitForm(action) {
        document.getElementById('myForm').setAttribute('action', action);
        document.getElementById('myForm').submit();
    }
</script>

